@page "/productedit/{Id:int}"
@using BlazorApp.Data
@inject ProductService ProductService
@inject NavigationManager NavigationManager

<h3>Chỉnh Sửa Sản Phẩm</h3>

@if (product == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Tên Sách:</label>
            <InputText id="name" @bind-Value="product.Name" class="form-control" />
            <ValidationMessage For="@(() => product.Name)" />
        </div>

        <div class="form-group">
            <label for="image">Hình Ảnh:</label>
            <InputFile OnChange="OnFileChange" accept=".jpg,.jpeg,.png" class="form-control" />
            @if (!string.IsNullOrEmpty(imagePreview))
            {
                <img src="@imagePreview" style="max-width: 200px; margin-top: 10px;" />
            }
            else if (!string.IsNullOrEmpty(product.Hinhanh))
            {
                <img src="@product.Hinhanh" style="max-width: 200px; margin-top: 10px;" />
            }
        </div>

        <div class="form-group">
            <label for="price">Giá:</label>
            <InputNumber id="price" @bind-Value="product.Price" class="form-control" />
            <ValidationMessage For="@(() => product.Price)" />
        </div>

        <div class="form-group">
            <label for="mota">Mô Tả:</label>
            <InputTextArea id="mota" @bind-Value="product.Mota" class="form-control" />
        </div>

        <div class="form-group">
            <label for="tentacgia">Tác Giả:</label>
            <InputText id="tentacgia" @bind-Value="product.Tentacgia" class="form-control" />
        </div>

        <div class="form-group">
            <label for="soluong">Số Lượng:</label>
            <InputNumber id="soluong" @bind-Value="product.Soluong" class="form-control" />
        </div>

        <div class="form-group">
            <label for="nxb">Nhà Xuất Bản:</label>
            <InputText id="nxb" @bind-Value="product.Nxb" class="form-control" />
        </div>

        <div class="form-group">
            <label for="code">Mã Sách:</label>
            <InputText id="code" @bind-Value="product.Code" class="form-control" />
        </div>

        <div class="form-group">
            <label for="theloai">Thể Loại:</label>
            <InputText id="theloai" @bind-Value="product.Theloai" class="form-control" />
        </div>

        <div class="form-group">
            <label for="ngayxb">Ngày Xuất Bản:</label>
            <InputDate id="ngayxb" @bind-Value="product.Ngayxb" class="form-control" />
        </div>

        <div class="form-group">
            <label for="sotrang">Số Trang:</label>
            <InputText id="sotrang" @bind-Value="product.Sotrang" class="form-control" />
        </div>

        <div class="form-group">
            <label for="tinhtrang">Tình Trạng:</label>
            <InputText id="tinhtrang" @bind-Value="product.Tinhtrang" class="form-control" />
        </div>

        <div class="form-group">
            <label for="taiban">Tái Bản:</label>
            <InputText id="taiban" @bind-Value="product.Taiban" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary">Lưu Thay Đổi</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Hủy</button>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Product? product;
    private IBrowserFile? selectedFile;
    private string? imagePreview;

    protected override async Task OnInitializedAsync()
    {
        product = await ProductService.GetProductByIdAsync(Id);
    }

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        
        // Create a data URL for preview
        var format = "image/jpeg";
        var buffer = new byte[selectedFile.Size];
        await selectedFile.OpenReadStream(maxAllowedSize: 10485760).ReadAsync(buffer);
        imagePreview = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task HandleValidSubmit()
    {
        if (product != null)
        {
            try
            {
                await ProductService.UpdateProductAsync(product, selectedFile);
                NavigationManager.NavigateTo("/products");
            }
            catch (Exception ex)
            {
                // Handle error (you might want to show an error message to the user)
                Console.WriteLine($"Error: {ex.Message}");
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/products");
    }
}
